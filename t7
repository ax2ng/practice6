# Реализовать расчет карточки лицевого счета в сбербанке при различных годовых
# процентах. Начисления производятся при каждой операции пропорционально времени
# между операциями. Реализовать операции поступления и снятия произвольной суммы.
# Выполнить сортировку списка. ВАРИАНТ 4


from tabulate import tabulate
import csv


def write_csv(headers: list, data: list) -> None:  # функция ничего не возвращает
    """
    Записывает данные в CSV файл и выводит
    структурированные данные, введенные пользователем

    :param headers: - Заголовки выводимой таблицы
    :param data: - Пользовательские данные
    """
    print(tabulate(data, headers, tablefmt='grid'))  # grid - стиль отображения таблички
    text = ""
    for i in data:
        text += ','.join([str(y) for y in i]) + '\n'  # join соединяет элементы списка в строку, \n для перевода строки
        # заджоинил запятые в итератор :))))))
    open('file.csv', 'w').write(text)  # open открывает файл для записи


def get_card() -> tuple:
    """
    Возвращает карту пользователя
    :return tuple:
    """
    while True:
        try:
            balance = float(input("Баланс: "))
            percents = float(input("Годовые: "))
        except ValueError:  # исключает функцию которая получает аргумент правильного типа, но некорректного значения.
            continue  # перешел на новую итерацию цикла досрочно
        return balance, percents


def add_money(card: tuple, count: float) -> tuple:  # функция возвращает карту
    """
    Добавляет деньги на счет

    :param card: кортеж
    :param count:
    :return:
    """
    card = (count + card[0] * (1 + card[1] / 100), card[1])
    return card


def get_money(card: tuple, count: float) -> tuple:
    """

    :param card:
    :param count:
    :return:
    """
    card = ((card[0] * (1 + card[1] / 100) - count), card[1])
    return card


def start() -> None:
    card = get_card()

    while True:
        operation = input("Операция (- или +): ")
        try:
            count = int(input("Количество денег: "))
        except ValueError:
            continue
        if operation == "-":
            card = get_money(card, count)
        else:
            card = add_money(card, count)
        print(card)
        print(write_csv(["Баланс", "Годовые"], [card]))


if __name__ == "__main__":  # позволяет разделить код, который будет выполняться
    start()
